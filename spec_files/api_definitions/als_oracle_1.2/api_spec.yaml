openapi: 3.0.1
info:
  title: Interface for interaction between Mojaloop's Account Lookup Service(ALS)
    and an Oracle Registry Service
  description: Based on Mojaloop [API Definition](https://github.com/mojaloop/mojaloop-specification/blob/master/API%20Definition%20v1.0.pdf)
    updated on 2018-03-13 Version 1.0. More information can be found are [mojaloop.io](http://mojaloop.io/)
  contact: {}
  version: "1.2"
servers:
- url: /
tags:
- name: participants
  description: ""
paths:
  /participants/{Type}/{ID}:
    get:
      tags:
      - participants
      summary: Look up participant information
      description: The HTTP request GET /participants/{Type}/{ID} is used to find
        out in which FSP the requested Party, defined by {Type} and {ID} is located
        (for example, GET /participants/MSISDN/123456789). This HTTP request should
        support a query string to filter FSP information regarding a specific currency
        only (This similarly applies to the SubId). To query a specific currency only,
        the HTTP request GET /participants/{Type}/{ID}?currency=XYZ should be used,
        where XYZ is the requested currency. Note - Both the currency and the SubId
        can be used mutually inclusive or exclusive
      operationId: ParticipantsByTypeAndIDGet
      parameters:
      - name: accept
        in: header
        description: The Accept header field indicates the version of the API the
          client would like the server to use.
        required: true
        schema:
          type: string
      - name: Type
        in: path
        description: The type of lookup being requested, this can be MSISDN, bankAccount
          etc.
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: The ID related to the Type, if MSISDN then this is the mobile
          number being requested
        required: true
        schema:
          type: string
      - name: Currency
        in: query
        description: The Currency code applicable to the ID being requested
        schema:
          type: string
      - name: SubId
        in: query
        description: The SubId related to the ID, or the Type
        schema:
          type: string
      - name: content-type
        in: header
        description: The Content-Type header indicates the specific version of the
          API used to send the payload body.
        required: true
        schema:
          type: string
      - name: date
        in: header
        description: The Date header field indicates the date when the request was
          sent.
        required: true
        schema:
          type: string
      - name: fspiop-source
        in: header
        description: The FSPIOP-Source header field is a non-HTTP standard field used
          by the API for identifying the sender of the HTTP request. The field should
          be set by the original sender of the request. Required for routing and signature
          verification (see header field FSPIOP-Signature).
        required: true
        schema:
          type: string
      - name: x-forwarded-for
        in: header
        description: The X-Forwarded-For header field is an unofficially accepted
          standard used for informational purposes of the originating client IP address,
          as a request might pass multiple proxies, firewalls, and so on. Multiple
          X-Forwarded-For values as in the example shown here should be expected and
          supported by implementers of the API. Note - An alternative to X-Forwarded-For
          is defined in RFC 7239. However, to this point RFC 7239 is less-used and
          supported than X-Forwarded-For.
        schema:
          type: string
      - name: fspiop-destination
        in: header
        description: The FSPIOP-Destination header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and responses
          to the destination. The field should be set by the original sender of the
          request (if known), so that any entities between the client and the server
          do not need to parse the payload for routing purposes.
        schema:
          type: string
      - name: fspiop-encryption
        in: header
        description: The FSPIOP-Encryption header field is a non-HTTP standard field
          used by the API for applying end-to-end encryption of the request.
        schema:
          type: string
      - name: fspiop-signature
        in: header
        description: The FSPIOP-Signature header field is a non-HTTP standard field
          used by the API for applying an end-to-end request signature.
        schema:
          type: string
      - name: fspiop-uri
        in: header
        description: The FSPIOP-URI header field is a non-HTTP standard field used
          by the API for signature verification, should contain the service URI. Required
          if signature verification is used, for more information see API Signature
          document.
        schema:
          type: string
      - name: fspiop-http-method
        in: header
        description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service HTTP
          method. Required if signature verification is used, for more information
          see API Signature document.
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            Content-Length:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantsTypeIDGetResponse'
        400:
          description: Bad Request - The application cannot process the request; for
            example, due to malformed syntax or the payload exceeded size restrictions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        401:
          description: Unauthorized - The request requires authentication in order
            to be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        403:
          description: Forbidden - The request was denied and will be denied in the
            future.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        404:
          description: Not Found - The resource specified in the URI was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        405:
          description: Method Not Allowed - An unsupported HTTP method for the request
            was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        406:
          description: Not acceptable - The server is not capable of generating content
            according to the Accept headers sent in the request. Used in the API to
            indicate that the server does not support the version that the client
            is requesting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        501:
          description: Not Implemented - The server does not support the requested
            service. The client should not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        503:
          description: Service Unavailable - The server is currently unavailable to
            accept any new service requests. This should be a temporary state, and
            the client should retry within a reasonable time frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
      deprecated: false
    put:
      tags:
      - participants
      summary: Return participant information
      description: The PUT /participants/{Type}/{ID} is used to update information
        in the server regarding the provided identity, defined by {Type} and {ID}
        (for example, PUT /participants/MSISDN/123456789).
      operationId: ParticipantsByTypeAndIDPut
      parameters:
      - name: Type
        in: path
        description: The type of lookup being requested, this can be MSISDN, bankAccount
          etc.
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: The ID related to the Type, if MSISDN then this is the mobile
          number being requested
        required: true
        schema:
          type: string
      - name: content-type
        in: header
        description: The Content-Type header indicates the specific version of the
          API used to send the payload body.
        required: true
        schema:
          type: string
      - name: date
        in: header
        description: The Date header field indicates the date when the request was
          sent.
        required: true
        schema:
          type: string
      - name: fspiop-source
        in: header
        description: The FSPIOP-Source header field is a non-HTTP standard field used
          by the API for identifying the sender of the HTTP request. The field should
          be set by the original sender of the request. Required for routing and signature
          verification (see header field FSPIOP-Signature).
        required: true
        schema:
          type: string
      - name: accept
        in: header
        description: The Accept header field indicates the version of the API the
          client would like the server to use.
        schema:
          type: string
      - name: x-forwarded-for
        in: header
        description: The X-Forwarded-For header field is an unofficially accepted
          standard used for informational purposes of the originating client IP address,
          as a request might pass multiple proxies, firewalls, and so on. Multiple
          X-Forwarded-For values as in the example shown here should be expected and
          supported by implementers of the API. Note - An alternative to X-Forwarded-For
          is defined in RFC 7239. However, to this point RFC 7239 is less-used and
          supported than X-Forwarded-For.
        schema:
          type: string
      - name: fspiop-destination
        in: header
        description: The FSPIOP-Destination header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and responses
          to the destination. The field should be set by the original sender of the
          request (if known), so that any entities between the client and the server
          do not need to parse the payload for routing purposes.
        schema:
          type: string
      - name: fspiop-encryption
        in: header
        description: The FSPIOP-Encryption header field is a non-HTTP standard field
          used by the API for applying end-to-end encryption of the request.
        schema:
          type: string
      - name: fspiop-signature
        in: header
        description: The FSPIOP-Signature header field is a non-HTTP standard field
          used by the API for applying an end-to-end request signature.
        schema:
          type: string
      - name: fspiop-uri
        in: header
        description: The FSPIOP-URI header field is a non-HTTP standard field used
          by the API for signature verification, should contain the service URI. Required
          if signature verification is used, for more information see API Signature
          document.
        schema:
          type: string
      - name: fspiop-http-method
        in: header
        description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service HTTP
          method. Required if signature verification is used, for more information
          see API Signature document.
        schema:
          type: string
      - name: content-length
        in: header
        description: The Content-Length header field indicates the anticipated size
          of the payload body. Only sent if there is a body. Note - The API supports
          a maximum size of 5242880 bytes (5 Megabytes)
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDPutRequest'
        required: true
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Bad Request - The application cannot process the request; for
            example, due to malformed syntax or the payload exceeded size restrictions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        401:
          description: Unauthorized - The request requires authentication in order
            to be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        403:
          description: Forbidden - The request was denied and will be denied in the
            future.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        404:
          description: Not Found - The resource specified in the URI was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        405:
          description: Method Not Allowed - An unsupported HTTP method for the request
            was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        406:
          description: Not acceptable - The server is not capable of generating content
            according to the Accept headers sent in the request. Used in the API to
            indicate that the server does not support the version that the client
            is requesting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        501:
          description: Not Implemented - The server does not support the requested
            service. The client should not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        503:
          description: Service Unavailable - The server is currently unavailable to
            accept any new service requests. This should be a temporary state, and
            the client should retry within a reasonable time frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
      deprecated: false
      x-codegen-request-body-name: body
    post:
      tags:
      - participants
      summary: Create participant information
      description: The HTTP request POST /participants/{Type}/{ID} is used to create
        information in the server regarding the provided identity, defined by {Type}
        and {ID} (for example, POST /participants/MSISDN/123456789).
      operationId: ParticipantsByTypeAndIDPost
      parameters:
      - name: accept
        in: header
        description: The Accept header field indicates the version of the API the
          client would like the server to use.
        required: true
        schema:
          type: string
      - name: Type
        in: path
        description: The type of lookup being requested, this can be MSISDN, bankAccount
          etc.
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: The ID related to the Type, if MSISDN then this is the mobile
          number being requested
        required: true
        schema:
          type: string
      - name: content-type
        in: header
        description: The Content-Type header indicates the specific version of the
          API used to send the payload body.
        required: true
        schema:
          type: string
      - name: date
        in: header
        description: The Date header field indicates the date when the request was
          sent.
        required: true
        schema:
          type: string
      - name: fspiop-source
        in: header
        description: The FSPIOP-Source header field is a non-HTTP standard field used
          by the API for identifying the sender of the HTTP request. The field should
          be set by the original sender of the request. Required for routing and signature
          verification (see header field FSPIOP-Signature).
        required: true
        schema:
          type: string
      - name: x-forwarded-for
        in: header
        description: The X-Forwarded-For header field is an unofficially accepted
          standard used for informational purposes of the originating client IP address,
          as a request might pass multiple proxies, firewalls, and so on. Multiple
          X-Forwarded-For values as in the example shown here should be expected and
          supported by implementers of the API. Note - An alternative to X-Forwarded-For
          is defined in RFC 7239. However, to this point RFC 7239 is less-used and
          supported than X-Forwarded-For.
        schema:
          type: string
      - name: fspiop-destination
        in: header
        description: The FSPIOP-Destination header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and responses
          to the destination. The field should be set by the original sender of the
          request (if known), so that any entities between the client and the server
          do not need to parse the payload for routing purposes.
        schema:
          type: string
      - name: fspiop-encryption
        in: header
        description: The FSPIOP-Encryption header field is a non-HTTP standard field
          used by the API for applying end-to-end encryption of the request.
        schema:
          type: string
      - name: fspiop-signature
        in: header
        description: The FSPIOP-Signature header field is a non-HTTP standard field
          used by the API for applying an end-to-end request signature.
        schema:
          type: string
      - name: fspiop-uri
        in: header
        description: The FSPIOP-URI header field is a non-HTTP standard field used
          by the API for signature verification, should contain the service URI. Required
          if signature verification is used, for more information see API Signature
          document.
        schema:
          type: string
      - name: fspiop-http-method
        in: header
        description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service HTTP
          method. Required if signature verification is used, for more information
          see API Signature document.
        schema:
          type: string
      - name: content-length
        in: header
        description: The Content-Length header field indicates the anticipated size
          of the payload body. Only sent if there is a body. Note - The API supports
          a maximum size of 5242880 bytes (5 Megabytes)
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsTypeIDPutRequest'
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad Request - The application cannot process the request; for
            example, due to malformed syntax or the payload exceeded size restrictions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        401:
          description: Unauthorized - The request requires authentication in order
            to be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        403:
          description: Forbidden - The request was denied and will be denied in the
            future.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        404:
          description: Not Found - The resource specified in the URI was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        405:
          description: Method Not Allowed - An unsupported HTTP method for the request
            was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        406:
          description: Not acceptable - The server is not capable of generating content
            according to the Accept headers sent in the request. Used in the API to
            indicate that the server does not support the version that the client
            is requesting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        501:
          description: Not Implemented - The server does not support the requested
            service. The client should not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        503:
          description: Service Unavailable - The server is currently unavailable to
            accept any new service requests. This should be a temporary state, and
            the client should retry within a reasonable time frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
      deprecated: false
      x-codegen-request-body-name: body
    delete:
      tags:
      - participants
      summary: Delete participant information
      description: The HTTP request DELETE /participants/{Type}/{ID} is used to delete
        information in the server regarding the provided identity, defined by {Type}
        and {ID}) (for example, DELETE /participants/MSISDN/123456789). This HTTP
        request should support a query string to delete FSP information regarding
        a specific currency only (This similarly applies to the SubId). To delete
        a specific currency only, the HTTP request DELETE /participants/{Type}/{ID}?currency=XYZ
        should be used, where XYZ is the requested currency. Note - Both the currency
        and the SubId can be used mutually inclusive or exclusive
      operationId: ParticipantsByTypeAndIDDelete
      parameters:
      - name: accept
        in: header
        description: The Accept header field indicates the version of the API the
          client would like the server to use.
        required: true
        schema:
          type: string
      - name: Type
        in: path
        description: The type of lookup being requested, this can be MSISDN, bankAccount
          etc.
        required: true
        schema:
          type: string
      - name: ID
        in: path
        description: The ID related to the Type, if MSISDN then this is the mobile
          number being requested
        required: true
        schema:
          type: string
      - name: Currency
        in: query
        description: The Currency code applicable to the ID being requested
        schema:
          type: string
      - name: SubId
        in: query
        description: The SubId related to the ID, or the Type
        schema:
          type: string
      - name: content-type
        in: header
        description: The Content-Type header indicates the specific version of the
          API used to send the payload body.
        required: true
        schema:
          type: string
      - name: date
        in: header
        description: The Date header field indicates the date when the request was
          sent.
        required: true
        schema:
          type: string
      - name: fspiop-source
        in: header
        description: The FSPIOP-Source header field is a non-HTTP standard field used
          by the API for identifying the sender of the HTTP request. The field should
          be set by the original sender of the request. Required for routing and signature
          verification (see header field FSPIOP-Signature).
        required: true
        schema:
          type: string
      - name: x-forwarded-for
        in: header
        description: The X-Forwarded-For header field is an unofficially accepted
          standard used for informational purposes of the originating client IP address,
          as a request might pass multiple proxies, firewalls, and so on. Multiple
          X-Forwarded-For values as in the example shown here should be expected and
          supported by implementers of the API. Note - An alternative to X-Forwarded-For
          is defined in RFC 7239. However, to this point RFC 7239 is less-used and
          supported than X-Forwarded-For.
        schema:
          type: string
      - name: fspiop-destination
        in: header
        description: The FSPIOP-Destination header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and responses
          to the destination. The field should be set by the original sender of the
          request (if known), so that any entities between the client and the server
          do not need to parse the payload for routing purposes.
        schema:
          type: string
      - name: fspiop-encryption
        in: header
        description: The FSPIOP-Encryption header field is a non-HTTP standard field
          used by the API for applying end-to-end encryption of the request.
        schema:
          type: string
      - name: fspiop-signature
        in: header
        description: The FSPIOP-Signature header field is a non-HTTP standard field
          used by the API for applying an end-to-end request signature.
        schema:
          type: string
      - name: fspiop-uri
        in: header
        description: The FSPIOP-URI header field is a non-HTTP standard field used
          by the API for signature verification, should contain the service URI. Required
          if signature verification is used, for more information see API Signature
          document.
        schema:
          type: string
      - name: fspiop-http-method
        in: header
        description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service HTTP
          method. Required if signature verification is used, for more information
          see API Signature document.
        schema:
          type: string
      responses:
        204:
          description: No Content
          content: {}
        400:
          description: Bad Request - The application cannot process the request; for
            example, due to malformed syntax or the payload exceeded size restrictions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        401:
          description: Unauthorized - The request requires authentication in order
            to be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        403:
          description: Forbidden - The request was denied and will be denied in the
            future.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        404:
          description: Not Found - The resource specified in the URI was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        405:
          description: Method Not Allowed - An unsupported HTTP method for the request
            was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        406:
          description: Not acceptable - The server is not capable of generating content
            according to the Accept headers sent in the request. Used in the API to
            indicate that the server does not support the version that the client
            is requesting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        501:
          description: Not Implemented - The server does not support the requested
            service. The client should not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        503:
          description: Service Unavailable - The server is currently unavailable to
            accept any new service requests. This should be a temporary state, and
            the client should retry within a reasonable time frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
      deprecated: false
  /participants:
    post:
      tags:
      - participants
      summary: Batch create participant information
      description: The HTTP request POST /participants is used to create information
        in the server regarding the provided list of identities. This request should
        be used for bulk creation of FSP information for more than one Party. The
        optional currency parameter should indicate that each provided Party supports
        the currency
      operationId: ParticipantsPost
      parameters:
      - name: accept
        in: header
        description: The Accept header field indicates the version of the API the
          client would like the server to use.
        required: true
        schema:
          type: string
      - name: content-type
        in: header
        description: The Content-Type header indicates the specific version of the
          API used to send the payload body.
        required: true
        schema:
          type: string
      - name: date
        in: header
        description: The Date header field indicates the date when the request was
          sent.
        required: true
        schema:
          type: string
      - name: fspiop-source
        in: header
        description: The FSPIOP-Source header field is a non-HTTP standard field used
          by the API for identifying the sender of the HTTP request. The field should
          be set by the original sender of the request. Required for routing and signature
          verification (see header field FSPIOP-Signature).
        required: true
        schema:
          type: string
      - name: content-length
        in: header
        description: The Content-Length header field indicates the anticipated size
          of the payload body. Only sent if there is a body. Note - The API supports
          a maximum size of 5242880 bytes (5 Megabytes)
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          type: integer
          format: int32
      - name: x-forwarded-for
        in: header
        description: The X-Forwarded-For header field is an unofficially accepted
          standard used for informational purposes of the originating client IP address,
          as a request might pass multiple proxies, firewalls, and so on. Multiple
          X-Forwarded-For values as in the example shown here should be expected and
          supported by implementers of the API. Note - An alternative to X-Forwarded-For
          is defined in RFC 7239. However, to this point RFC 7239 is less-used and
          supported than X-Forwarded-For.
        schema:
          type: string
      - name: fspiop-destination
        in: header
        description: The FSPIOP-Destination header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and responses
          to the destination. The field should be set by the original sender of the
          request (if known), so that any entities between the client and the server
          do not need to parse the payload for routing purposes.
        schema:
          type: string
      - name: fspiop-encryption
        in: header
        description: The FSPIOP-Encryption header field is a non-HTTP standard field
          used by the API for applying end-to-end encryption of the request.
        schema:
          type: string
      - name: fspiop-signature
        in: header
        description: The FSPIOP-Signature header field is a non-HTTP standard field
          used by the API for applying an end-to-end request signature.
        schema:
          type: string
      - name: fspiop-uri
        in: header
        description: The FSPIOP-URI header field is a non-HTTP standard field used
          by the API for signature verification, should contain the service URI. Required
          if signature verification is used, for more information see API Signature
          document.
        schema:
          type: string
      - name: fspiop-http-method
        in: header
        description: The FSPIOP-HTTP-Method header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service HTTP
          method. Required if signature verification is used, for more information
          see API Signature document.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantsPostRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantsIDPutResponse'
        400:
          description: Bad Request - The application cannot process the request; for
            example, due to malformed syntax or the payload exceeded size restrictions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        401:
          description: Unauthorized - The request requires authentication in order
            to be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        403:
          description: Forbidden - The request was denied and will be denied in the
            future.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        404:
          description: Not Found - The resource specified in the URI was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        405:
          description: Method Not Allowed - An unsupported HTTP method for the request
            was used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        406:
          description: Not acceptable - The server is not capable of generating content
            according to the Accept headers sent in the request. Used in the API to
            indicate that the server does not support the version that the client
            is requesting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        501:
          description: Not Implemented - The server does not support the requested
            service. The client should not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
        503:
          description: Service Unavailable - The server is currently unavailable to
            accept any new service requests. This should be a temporary state, and
            the client should retry within a reasonable time frame.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInformationResponse'
      deprecated: false
      x-codegen-request-body-name: body
components:
  schemas:
    CurrencyEnum:
      title: CurrencyEnum
      type: string
      description: The currency codes defined in ISO 4217 as three-letter alphabetic
        codes are used as the standard naming representation for currencies.
      example: AED
      enum:
      - AED
      - AFN
      - ALL
      - AMD
      - ANG
      - AOA
      - ARS
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - BTN
      - BWP
      - BYN
      - BZD
      - CAD
      - CDF
      - CHF
      - CLP
      - CNY
      - COP
      - CRC
      - CUC
      - CUP
      - CVE
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EGP
      - ERN
      - ETB
      - EUR
      - FJD
      - FKP
      - GBP
      - GEL
      - GGP
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HRK
      - HTG
      - HUF
      - IDR
      - ILS
      - IMP
      - INR
      - IQD
      - IRR
      - ISK
      - JEP
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - LSL
      - LYD
      - MAD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - NAD
      - NGN
      - NIO
      - NOK
      - NPR
      - NZD
      - OMR
      - PAB
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SLL
      - SOS
      - SPL
      - SRD
      - STD
      - SVC
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TVD
      - TWD
      - TZS
      - UAH
      - UGX
      - USD
      - UYU
      - UZS
      - VEF
      - VND
      - VUV
      - WST
      - XAF
      - XCD
      - XDR
      - XOF
      - XPF
      - YER
      - ZAR
      - ZMW
      - ZWD
    PartyIdTypeEnum:
      title: PartyIdTypeEnum
      type: string
      description: Below are the allowed values for the enumeration - MSISDN An MSISDN
        (Mobile Station International Subscriber Directory Number, that is, the phone
        number) is used as reference to a participant. The MSISDN identifier should
        be in international format according to the ITU-T E.164 standard. Optionally,
        the MSISDN may be prefixed by a single plus sign, indicating the international
        prefix. - EMAIL An email is used as reference to a participant. The format
        of the email should be according to the informational RFC 3696. - PERSONAL_ID
        A personal identifier is used as reference to a participant. Examples of personal
        identification are passport number, birth certificate number, and national
        registration number. The identifier number is added in the PartyIdentifier
        element. The personal identifier type is added in the PartySubIdOrType element.
        - BUSINESS A specific Business (for example, an organization or a company)
        is used as reference to a participant. The BUSINESS identifier can be in any
        format. To make a transaction connected to a specific username or bill number
        in a Business, the PartySubIdOrType element should be used. - DEVICE A specific
        device (for example, a POS or ATM) ID connected to a specific business or
        organization is used as reference to a Party. For referencing a specific device
        under a specific business or organization, use the PartySubIdOrType element.
        - ACCOUNT_ID A bank account number or FSP account ID should be used as reference
        to a participant. The ACCOUNT_ID identifier can be in any format, as formats
        can greatly differ depending on country and FSP. - IBAN A bank account number
        or FSP account ID is used as reference to a participant. The IBAN identifier
        can consist of up to 34 alphanumeric characters and should be entered without
        whitespace. - ALIAS An alias is used as reference to a participant. The alias
        should be created in the FSP as an alternative reference to an account owner.
        Another example of an alias is a username in the FSP system. The ALIAS identifier
        can be in any format. It is also possible to use the PartySubIdOrType element
        for identifying an account under an Alias defined by the PartyIdentifier.
      example: MSISDN
      enum:
      - MSISDN
      - EMAIL
      - PERSONAL_ID
      - BUSINESS
      - DEVICE
      - ACCOUNT_ID
      - IBAN
      - ALIAS
    ErrorInformation:
      title: ErrorInformation
      required:
      - errorCode
      - errorDescription
      type: object
      properties:
        errorCode:
          type: string
          description: Specific error number.
        errorDescription:
          type: string
          description: Error description string.
        extensionList:
          $ref: '#/components/schemas/ExtensionList'
      description: Data model for the complex type ErrorInformation.
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      properties:
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      description: Data model for the complex type object that contains an optional
        element ErrorInformation used along with 4xx and 5xx responses.
    Extension:
      title: Extension
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          description: Extension key.
        value:
          type: string
          description: Extension value.
      description: Data model for the complex type Extension
    ExtensionList:
      title: ExtensionList
      required:
      - extension
      type: object
      properties:
        extension:
          maxItems: 16
          minItems: 1
          type: array
          description: Number of Extension elements
          items:
            $ref: '#/components/schemas/Extension'
      description: Data model for the complex type ExtensionList
    ParticipantsTypeIDGetResponse:
      title: ParticipantsTypeIDGetResponse
      type: object
      properties:
        partyList:
          maxItems: 10000
          minItems: 1
          type: array
          description: List of PartyTypeIdInfo elements that were either created or
            failed to be created.
          items:
            $ref: '#/components/schemas/PartyTypeIdInfo'
      description: OK
    ParticipantsTypeIDPutRequest:
      title: ParticipantsTypeIDPutRequest
      required:
      - currency
      - fspId
      type: object
      properties:
        fspId:
          type: string
          description: FSP Identifier that the Party belongs to.
        currency:
          type: string
          description: Indicate that the provided Currency was set to be supported
            by each successfully added PartyIdInfo.
        partySubIdOrType:
          type: string
          description: A sub-identifier or sub-type for the Party.
      description: PUT /participants/{Type}/{ID} object
    ParticipantsPostRequest:
      title: ParticipantsPostRequest
      required:
      - partyList
      - requestId
      type: object
      properties:
        requestId:
          type: string
          description: The ID of the request, decided by the client. Used for identification
            of the callback from the server.
        partyList:
          maxItems: 10000
          minItems: 1
          type: array
          description: List of PartyIdInfo elements that the client would like to
            update or create FSP information about.
          items:
            $ref: '#/components/schemas/PartyIdInfo'
      description: POST /participants object
    PartyIdInfo:
      title: PartyIdInfo
      required:
      - partyIdType
      - partyIdentifier
      type: object
      properties:
        partyIdType:
          type: string
          description: Type of the identifier.
        partyIdentifier:
          type: string
          description: An identifier for the Party.
        partySubIdOrType:
          type: string
          description: A sub-identifier or sub-type for the Party.
        fspId:
          type: string
          description: FSP ID
        currency:
          type: string
          description: Indicate that the provided Currency was set to be supported
            by each successfully added PartyIdInfo.
      description: Data model for the complex type PartyIdInfo.
    ParticipantsIDPutResponse:
      title: ParticipantsIDPutResponse
      required:
      - partyList
      type: object
      properties:
        partyList:
          maxItems: 10000
          minItems: 1
          type: array
          description: List of PartyResult elements that were either created or failed
            to be created.
          items:
            $ref: '#/components/schemas/PartyResult'
      description: PUT /participants/{ID} object
    PartyResult:
      title: PartyResult
      required:
      - partyId
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/PartyIdInfo'
        errorInformation:
          $ref: '#/components/schemas/ErrorInformation'
      description: Data model for the complex type PartyResult.
    PartyTypeIdInfo:
      title: PartyTypeIdInfo
      required:
      - currency
      - fspId
      type: object
      properties:
        fspId:
          type: string
          description: FSP ID
        currency:
          type: string
          description: Indicate that the provided Currency was set to be supported
            by each successfully added PartyIdInfo.
        partySubIdOrType:
          type: string
          description: A sub-identifier or sub-type for the Party.
      description: Data model for the complex type PartyIdInfo.
