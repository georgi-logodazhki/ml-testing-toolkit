{
  "name": "hub-transfer-negative-scenarios-tests",
  "test_cases": [
    {
      "id": 1,
      "name": "payee_abort",
      "requests": [
        {
          "id": 1,
          "description": "Get payerfsp position before TheTransfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"payerfspPositionBeforePrepare\", pm.response.body[0].value);"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Get payerfsp position before TheTransfer Copy",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payeefsp/positions",
          "method": "get",
          "params": {
            "name": "payeefsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"payeefspPositionBeforePrepare\", pm.response.body[0].value);"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp",
            "FSPIOP-Destination": "noresponsepayeefsp"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "payerfsp",
            "payeeFsp": "noresponsepayeefsp",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.validCondition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');",
                "",
                "pm.environment.set('transfer_ID', uuid.v4());",
                "pm.environment.set('transferDate', (new Date()).toUTCString());",
                "pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
                "pm.environment.set('transferAmount', 99);"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Get payerfsp position after the transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "pm.environment.set(\"payerfspPositionAfterTransfer\", jsonData[0].value)"
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 500)"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Check Transfer status - ABORTED",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$environment.transfer_ID}",
          "method": "get",
          "params": {
            "ID": "{$environment.transfer_ID}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp"
          },
          "ignoreCallbacks": true,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Send Payee Abort Status code is 200",
                "exec": [
                  "expect(environment.sendPayeeAbortResponse.code).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Send Payee Abort Response code should be ABORTED",
                "exec": [
                  "expect(environment.sendPayeeAbortCallbackBody.transferState).to.equal('ABORTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 4,
                "description": "Callback status is ABORTED",
                "exec": [
                  "expect(environment.checkTransferStatusCallback.transferState).to.equal('ABORTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(",
                "    {",
                "      url: pm.environment.get(\"HOST_ML_API_ADAPTER\")+\"/transfers/\"+pm.environment.get(\"transfer_ID\"),",
                "      method: \"PUT\",",
                "      header: {",
                "        \"Content-Type\": \"application/vnd.interoperability.transfers+json;version=1\",",
                "        \"Date\": \"Thu, 24 Jan 2019 10:22:12 GMT\",",
                "        \"FSPIOP-Source\": \"noresponsepayeefsp\",",
                "        \"FSPIOP-Destination\": \"payerfsp\"",
                "      },",
                "      body: {",
                "        mode: 'raw',",
                "        raw: JSON.stringify({",
                "          \"fulfilment\": pm.environment.get(\"validFulfillment\"),",
                "          \"completedTimestamp\": pm.environment.get(\"completedTimestamp\"),",
                "          \"transferState\": \"ABORTED\"",
                "        })",
                "      }",
                "    }, function (err, response) {",
                "    pm.environment.set(\"sendPayeeAbortResponse\", response)",
                "    pm.environment.set(\"sendPayeeAbortResponseBody\", response.json())",
                "    console.log(\"sendPayeeAbortResponse: \", pm.environment.get(\"sendPayeeAbortResponse\"))",
                "   });",
                "}, 500)",
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    console.log(response)",
                "    pm.environment.set(\"sendPayeeAbortCallbackBody\", response.json())",
                "    pm.environment.set(\"sendPayeeAbortCallback\", response)",
                "    console.log(\"sendPayeeAbortCallback: \", pm.environment.get(\"sendPayeeAbortCallback\"))",
                "   });",
                "}, 1000)"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"checkTransferStatusCallback\", response.json())",
                "    console.log(\"checkTransferStatusCallback: \", pm.environment.get(\"checkTransferStatusCallback\"))",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Check Payerfsp position after Abort",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payerfsp position after Payee ABORT should be same as position before prepare.",
                "exec": [
                  "expect(response.data[0].value).to.equal(+environment.payerfspPositionBeforePrepare)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 3000)"
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Check Payeefsp position after Abort",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payeefsp/positions",
          "method": "get",
          "params": {
            "name": "payeefsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payeefsp position after Payee ABORT should be same as position before prepare.",
                "exec": [
                  "expect(response.data[0].value).to.equal(+environment.payeefspPositionBeforePrepare)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 3000)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "payee_invalid_fulfillment",
      "requests": [
        {
          "id": 1,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp",
            "FSPIOP-Destination": "noresponsepayeefsp"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "payerfsp",
            "payeeFsp": "noresponsepayeefsp",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.validCondition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');",
                "",
                "pm.environment.set('transfer_ID', uuid.v4());",
                "pm.environment.set('transferDate', (new Date()).toUTCString());",
                "pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
                "pm.environment.set('transferAmount', 99);"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Get payerfsp position before the Transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"payerfspPositionBeforeTransfer\", pm.response.body[0].value);"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get payeefsp position before the Transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payeefsp/positions",
          "method": "get",
          "params": {
            "name": "payeefsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"payeefspPositionBeforeTransfer\", pm.response.body[0].value);"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Get payerfsp position after the transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "pm.environment.set(\"payerfspPositionAfterTransfer\", jsonData[0].value)"
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 500)"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Check Transfer status - RESERVED",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$environment.transfer_ID}",
          "method": "get",
          "params": {
            "ID": "{$environment.transfer_ID}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp"
          },
          "ignoreCallbacks": true,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Send Payee Invalid Fulfillment Status code is 400",
                "exec": [
                  "expect(environment.sendPayeeInvalidFulfillmentResponse.code).to.equal(400)"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 4,
                "description": "Callback transferState is RESERVED",
                "exec": [
                  "expect(environment.checkTransferStatusCallback.transferState).to.equal('RESERVED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(",
                "    {",
                "      url: pm.environment.get(\"HOST_ML_API_ADAPTER\")+\"/transfers/\"+pm.environment.get(\"transfer_ID\"),",
                "      method: \"PUT\",",
                "      header: {",
                "        \"Content-Type\": \"application/vnd.interoperability.transfers+json;version=1\",",
                "        \"Date\": \"Thu, 24 Jan 2019 10:22:12 GMT\",",
                "        \"FSPIOP-Source\": \"noresponsepayeefsp\",",
                "        \"FSPIOP-Destination\": \"payerfsp\"",
                "      },",
                "      body: {",
                "        mode: 'raw',",
                "        raw: JSON.stringify({",
                "          \"fulfilment\": pm.environment.get(\"invalidFulfillment\"),",
                "          \"completedTimestamp\": pm.environment.get(\"completedTimestamp\"),",
                "          \"transferState\": \"COMMITTED\"",
                "        })",
                "      }",
                "    }, function (err, response) {",
                "    pm.environment.set(\"sendPayeeInvalidFulfillmentResponse\", response)",
                "    pm.environment.set(\"sendPayeeInvalidFulfillmentResponseBody\", response.json())",
                "    console.log(\"sendPayeeInvalidFulfillmentResponse: \", pm.environment.get(\"sendPayeeInvalidFulfillmentResponse\"))",
                "   });",
                "}, 500)",
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    console.log(response)",
                "    pm.environment.set(\"sendPayeeInvalidFulfillmentCallbackBody\", response.json())",
                "    pm.environment.set(\"sendPayeeInvalidFulfillmentCallback\", response)",
                "    console.log(\"sendPayeeInvalidFulfillmentCallback: \", pm.environment.get(\"sendPayeeInvalidFulfillmentCallback\"))",
                "   });",
                "}, 1000)"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"checkTransferStatusCallback\", response.json())",
                "    console.log(\"checkTransferStatusCallback: \", pm.environment.get(\"checkTransferStatusCallback\"))",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Check Payerfsp position",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payerfsp position after Payee Invalid Fulfillment should be same as position before transfer.",
                "exec": [
                  "expect(response.data[0].value).to.equal(+environment.payerfspPositionBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 3000)"
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Check Payeefsp position",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payeefsp/positions",
          "method": "get",
          "params": {
            "name": "payeefsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payeefsp position after Payee Invalid Fulfillment should be same as position before transfer.",
                "exec": [
                  "expect(response.data[0].value).to.equal(+environment.payeefspPositionBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 3000)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "transfer_timeout",
      "requests": [
        {
          "id": 1,
          "description": "Get payerfsp position",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var result",
                "pm.response.body.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
                " undefined})",
                "pm.environment.set(\"payerfspPositionBeforePrepare\", result);"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp",
            "FSPIOP-Destination": "noresponsepayeefsp"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "payerfsp",
            "payeeFsp": "noresponsepayeefsp",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.validCondition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "params": {
            "name": ""
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');",
                "var generatedUUID = uuid.v4();",
                "",
                "pm.environment.set('transfer_ID', generatedUUID);",
                "pm.environment.set('transferDate', (new Date()).toUTCString());",
                "pm.environment.set('transferAmount', 10);",
                "pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 2000))"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get payerfsp position before timeout",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payerfsp position after Prepare should be same as position before prepare+transfer amount",
                "exec": [
                  "expect(environment.payerfspPositionBeforeTimeout).to.equal(environment.payerfspPositionBeforePrepare + +environment.transferAmount)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var result",
                "pm.response.body.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
                " undefined})",
                "pm.environment.set(\"payerfspPositionBeforeTimeout\", result)"
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 500)"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Get payerfsp position after timeout",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/payerfsp/positions",
          "method": "get",
          "params": {
            "name": "payerfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payerfsp position after Prepare should be same as position before prepare+transfer amount",
                "exec": [
                  "expect(environment.payerfspPositionBeforeTimeout).to.equal(environment.payerfspPositionBeforePrepare)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var result;",
                "",
                "jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
                " undefined})",
                "pm.environment.set(\"payerfspPositionBeforeTimeout\", result)"
              ]
            },
            "preRequest": {
              "exec": [
                "setTimeout(() => {}, 15000)"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Check Transfer status - ABORTED",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$environment.transfer_ID}",
          "method": "get",
          "params": {
            "ID": "{$environment.transfer_ID}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$environment.transferDate}",
            "FSPIOP-Source": "payerfsp"
          },
          "ignoreCallbacks": true,
          "tests": {
            "assertions": [
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 4,
                "description": "Callback status is ABORTED",
                "exec": [
                  "expect(environment.checkTransferStatusCallback.transferState).to.equal('ABORTED')"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"checkTransferStatusCallback\", response.json())",
                "    console.log(\"checkTransferStatusCallback: \", pm.environment.get(\"checkTransferStatusCallback\"))",
                "  });",
                "}, 500)"
              ]
            }
          }
        }
      ]
    }
  ]
}