{
  "name": "central-admin-tests",
  "inputValues": {
    "fromIdType": "MSISDN",
    "fromIdValue": "44123456789",
    "fromFirstName": "Firstname-Test",
    "fromLastName": "Lastname-Test",
    "fromDOB": "1984-01-01",
    "note": "Test",
    "currency": "USD",
    "amount": "100",
    "homeTransactionId": "123ABC",
    "fromFspId": "testingtoolkitdfsp",
    "accept": "application/vnd.interoperability.parties+json;version=1.0",
    "contentType": "application/vnd.interoperability.parties+json;version=1.0",
    "toIdValue": "9848613613",
    "toIdType": "MSISDN",
    "toFspId": "userdfsp",
    "acceptQuotes": "application/vnd.interoperability.quotes+json;version=1.0",
    "contentTypeQuotes": "application/vnd.interoperability.quotes+json;version=1.0",
    "acceptTransfers": "application/vnd.interoperability.transfers+json;version=1.0",
    "contentTransfers": "application/vnd.interoperability.transfers+json;version=1.0",
    "centralLedger": "http://localhost:3001",
    "HOST_CENTRAL_LEDGER": "http://localhost:3001",
    "BASE_CENTRAL_LEDGER_ADMIN": "",
    "HUB_OPERATOR_BEARER_TOKEN": "NOT_APPLICABLE",
    "hub_operator": "NOT_APPLICABLE",
    "payerfsp": "testingtoolkitdfsp",
    "mlAPIAdapter": "http://localhost:3005",
    "accountId": "4",
    "payeefsp": "userdfsp",
    "receiverMSISDN": "9848613613",
    "ilpPacket": "AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19",
    "condition": "HOr22-H3AfTDHrSkPjJtVPRdKouuMkDXTR4ejlQa8Ks",
    "HOST_QUOTING_SERVICE": "http://localhost:3002"
  },
  "test_cases": [
    {
      "id": 1,
      "name": "funds_in",
      "requests": [
        {
          "id": 1,
          "description": "test",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.fromFspId}/accounts/4",
          "method": "post",
          "params": {
            "name": "{$inputs.fromFspId}",
            "id": "4"
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json"
          },
          "body": {
            "transferId": "{$environment.fundsInPrepareTransferId}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$environment.fundsInPrepareAmount}",
              "currency": "{$environment.currency}"
            },
            "extensionList": {
              "extension": [
                {
                  "key": "string",
                  "value": "string"
                }
              ]
            }
          },
          "url": "http://localhost:3001",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 3,
                "description": "hub Recon Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.hubReconAccountBalanceAfterFundsIn)).to.equal(Number(environment.hubReconAccountBalanceBeforeFundsIn) + Number(request.body.amount.amount))"
                ]
              },
              {
                "id": 4,
                "description": "payerfsp Settlement Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.payerfspSettlementAccountBalanceAfterFundsIn)).to.equal(Number(environment.payerfspSettlementAccountBalanceBeforeFundsIn) - Number(request.body.amount.amount))"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "var generatedUUID = uuid.v4();\r",
                "pm.environment.set('fundsInPrepareTransferId', generatedUUID);\r",
                "pm.environment.set('fundsInPrepareAmount', 5000);\r",
                "\r",
                "\r",
                "const payerfspGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if ((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});\r",
                "\r",
                "const hubGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if ((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {\r",
                "    const payerfspGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "        console.log('payerfsp accounts: ', response.json())\r",
                "        var jsonData = response.json()\r",
                "        var payerfspSettlementAccountBalanceAfterFundsIn\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "                pm.environment.set(\"payerfspSettlementAccountBalanceAfterFundsIn\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))\r",
                "        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {\r",
                "            pm.expect(pm.environment.get('payerfspSettlementAccountBalanceAfterFundsIn')).to.eql(payerfspExpectedBalance);\r",
                "        });\r",
                "\r",
                "    });\r",
                "\r",
                "    const hubGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "        console.log('Hub accounts balance: ', response.json())\r",
                "        var jsonData = response.json()\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"hubReconAccountBalanceAfterFundsIn\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")) + Number(pm.environment.get('fundsInPrepareAmount'))\r",
                "        console.log(hubExpectedBalance)\r",
                "        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {\r",
                "            pm.expect(pm.environment.get(\"hubReconAccountBalanceAfterFundsIn\")).to.eql(hubExpectedBalance);\r",
                "        });\r",
                "    });\r",
                "}, 2000)"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Record Funds In - prepare transfer status",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/3b6dcd23-e2c5-4663-be4e-ab59e98741e4",
          "method": "get",
          "params": {
            "ID": "3b6dcd23-e2c5-4663-be4e-ab59e98741e4"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "url": "http://localhost:3005",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "test",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "commited",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "funds_out - Reserve&Commit",
      "requests": [
        {
          "id": 1,
          "description": "test",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.fromFspId}/accounts/{$inputs.accountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.fromFspId}",
            "id": "{$inputs.accountId}"
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json"
          },
          "body": {
            "transferId": "{$environment.fundsOutPrepareReserveTransferId}",
            "externalReference": "string",
            "action": "recordFundsOutPrepareReserve",
            "reason": "string",
            "amount": {
              "amount": "{$environment.fundsOutPrepareReserveAmount}",
              "currency": "{$environment.currency}"
            },
            "extensionList": {
              "extension": [
                {
                  "key": "string",
                  "value": "string"
                }
              ]
            }
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 3,
                "description": "hub Recon Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.hubReconAccountBalanceAfterFundsOutPrepare)).to.equal(Number(environment.hubReconAccountBalanceBeforeFundsOutPrepare))"
                ]
              },
              {
                "id": 4,
                "description": "payerfsp Settlement Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.payerfspSettlementAccountBalanceAfterFundsOutPrepare)).to.equal(Number(environment.payerfspSettlementAccountBalanceBeforeFundsOutPrepare) + environment.fundsOutPrepareReserveAmount)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "var generatedUUID = uuid.v4();\r",
                "\r",
                "pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);\r",
                "pm.environment.set('fundsOutPrepareReserveAmount', 1000);\r",
                "\r",
                "const payerfspGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "\r",
                "pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id)\r",
                "            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});\r",
                "\r",
                "const hubGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {\r",
                "    const payerfspGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var payerfspSettlementAccountBalanceAfterFundsOutPrepare\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"payerfspSettlementAccountBalanceAfterFundsOutPrepare\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "\r",
                "    });\r",
                "\r",
                "    const hubGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var hubReconAccountBalanceAfterFundsOutPrepare\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"hubReconAccountBalanceAfterFundsOutPrepare\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "}, 2000)"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Record Funds In - prepare transfer status",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.1.request.body.transferId}",
          "method": "get",
          "params": {
            "ID": "{$prev.1.request.body.transferId}"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "url": "{$inputs.mlAPIAdapter}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "test",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "RESERVED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('RESERVED')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Record Funds Out Commit - payerfsp",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}/transfers/{transferId}",
          "path": "/participants/{$inputs.fromFspId}/accounts/{$inputs.accountId}/transfers/{$prev.1.request.body.transferId}",
          "method": "put",
          "params": {
            "name": "{$inputs.fromFspId}",
            "id": "{$inputs.accountId}",
            "transferId": "{$prev.1.request.body.transferId}"
          },
          "url": "{$inputs.centralLedger}",
          "headers": {
            "FSPIOP-Source": "{$inputs.hub_operator}",
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 3,
                "description": "hub Recon Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.payerfspSettlementAccountBalanceAfterFundsOutCommit)).to.equal(Number(environment.payerfspSettlementAccountBalanceBeforeFundsOutCommit))"
                ]
              },
              {
                "id": 4,
                "description": "payerfsp Settlement Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.hubReconAccountBalanceAfterFundsOutCommit)).to.equal(Number(environment.hubReconAccountBalanceBeforeFundsOutCommit) - environment.fundsOutCommitAmount)"
                ]
              }
            ]
          },
          "body": {
            "action": "recordFundsOutCommit",
            "reason": "Reason for out flow of funds"
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "var generatedUUID = uuid.v4();\r",
                "pm.environment.set('fundsOutCommitTransferId', generatedUUID);\r",
                "pm.environment.set('fundsOutCommitAmount', 1000);\r",
                "\r",
                "\r",
                "const payerfspGetStatusRequest = {\r",
                "  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',\r",
                "  method: 'GET',\r",
                "  header: {\r",
                "      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "      \"Content-Type\": \"application/json\"\r",
                "  }\r",
                "};\r",
                "pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for(var i in jsonData) {\r",
                "        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});\r",
                "\r",
                "const hubGetStatusRequest = {\r",
                "  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',\r",
                "  method: 'GET',\r",
                "  header: {\r",
                "      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "      \"Content-Type\": \"application/json\"\r",
                "  }\r",
                "};\r",
                "pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for(var i in jsonData) {\r",
                "        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {\r",
                "    const payerfspGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var payerfspSettlementAccountBalanceAfterFundsOutCommit\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "                pm.environment.set(\"payerfspSettlementAccountBalanceAfterFundsOutCommit\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "\r",
                "    const hubGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var hubReconAccountBalanceAfterFundsOutCommit\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "                pm.environment.set(\"hubReconAccountBalanceAfterFundsOutCommit\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "}, 2000)"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Record Funds In - prepare transfer status Copy",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.1.request.body.transferId}",
          "method": "get",
          "params": {
            "ID": "{$prev.1.request.body.transferId}"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "url": "{$inputs.mlAPIAdapter}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "test",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "funds_out - Reserve&Abort",
      "requests": [
        {
          "id": 1,
          "description": "test",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.fromFspId}/accounts/{$inputs.accountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.fromFspId}",
            "id": "{$inputs.accountId}"
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/json"
          },
          "body": {
            "transferId": "{$environment.fundsOutPrepareReserveTransferId}",
            "externalReference": "string",
            "action": "recordFundsOutPrepareReserve",
            "reason": "string",
            "amount": {
              "amount": "{$environment.fundsOutPrepareReserveAmount}",
              "currency": "{$environment.currency}"
            },
            "extensionList": {
              "extension": [
                {
                  "key": "string",
                  "value": "string"
                }
              ]
            }
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 3,
                "description": "hub Recon Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.hubReconAccountBalanceAfterFundsOutPrepare)).to.equal(Number(environment.hubReconAccountBalanceBeforeFundsOutPrepare))"
                ]
              },
              {
                "id": 4,
                "description": "payerfsp Settlement Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.payerfspSettlementAccountBalanceAfterFundsOutPrepare)).to.equal(Number(environment.payerfspSettlementAccountBalanceBeforeFundsOutPrepare) + environment.fundsOutPrepareReserveAmount)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "var generatedUUID = uuid.v4();\r",
                "\r",
                "pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);\r",
                "pm.environment.set('fundsOutPrepareReserveAmount', 1000);\r",
                "\r",
                "const payerfspGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "\r",
                "pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id)\r",
                "            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});\r",
                "\r",
                "const hubGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "};\r",
                "pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "    console.log(response.json())\r",
                "    var jsonData = response.json()\r",
                "    for (var i in jsonData) {\r",
                "        if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)\r",
                "        }\r",
                "    }\r",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {\r",
                "    const payerfspGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var payerfspSettlementAccountBalanceAfterFundsOutPrepare\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"payerfspSettlementAccountBalanceAfterFundsOutPrepare\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "\r",
                "    });\r",
                "\r",
                "    const hubGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var hubReconAccountBalanceAfterFundsOutPrepare\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"hubReconAccountBalanceAfterFundsOutPrepare\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "}, 2000)"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Record Funds In - prepare transfer status",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.1.request.body.transferId}",
          "method": "get",
          "params": {
            "ID": "{$prev.1.request.body.transferId}"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "url": "{$inputs.mlAPIAdapter}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "RESERVED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('RESERVED')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Record Funds Out Abort - payerfsp",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}/transfers/{transferId}",
          "path": "/participants/{$inputs.fromFspId}/accounts/{$inputs.accountId}/transfers/{$prev.1.request.body.transferId}",
          "method": "put",
          "params": {
            "name": "{$inputs.fromFspId}",
            "id": "{$inputs.accountId}",
            "transferId": "{$prev.1.request.body.transferId}"
          },
          "url": "http://localhost:3001",
          "headers": {
            "FSPIOP-Source": "{$inputs.hub_operator}",
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 3,
                "description": "hub Recon Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.payerfspSettlementAccountBalanceAfterFundsOutAbort)).to.equal(Number(environment.payerfspSettlementAccountBalanceBeforeFundsOutPrepare))"
                ]
              },
              {
                "id": 4,
                "description": "payerfsp Settlement Account Balance After Funds In is as expected",
                "exec": [
                  "expect(Number(environment.hubReconAccountBalanceAfterFundsOutAbort)).to.equal(Number(environment.hubReconAccountBalanceBeforeFundsOutAbort))"
                ]
              }
            ]
          },
          "body": {
            "action": "recordFundsOutAbort",
            "reason": "Reason for out flow of funds"
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "var generatedUUID = uuid.v4();\r",
                "pm.environment.set('fundsOutCommitAmount', 1000);\r",
                "\r",
                "setTimeout(function () {\r",
                "  const payerfspGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "  };\r",
                "  pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "      console.log(response.json())\r",
                "      var jsonData = response.json()\r",
                "      for(var i in jsonData) {\r",
                "          if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)\r",
                "          }\r",
                "      }\r",
                "  });\r",
                "  \r",
                "  const hubGetStatusRequest = {\r",
                "    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',\r",
                "    method: 'GET',\r",
                "    header: {\r",
                "        \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),\r",
                "        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "        \"Content-Type\": \"application/json\"\r",
                "    }\r",
                "  };\r",
                "  pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "      console.log(response.json())\r",
                "      var jsonData = response.json()\r",
                "      for(var i in jsonData) {\r",
                "          if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "              pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)\r",
                "          }\r",
                "      }\r",
                "  });\r",
                "}, 2000)"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {\r",
                "    const payerfspGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var payerfspSettlementAccountBalanceAfterFundsOutCommit\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "                pm.environment.set(\"payerfspSettlementAccountBalanceAfterFundsOutAbort\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "\r",
                "    const hubGetStatusRequest = {\r",
                "        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',\r",
                "        method: 'GET',\r",
                "        header: {\r",
                "            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),\r",
                "            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),\r",
                "            \"Content-Type\": \"application/json\"\r",
                "        }\r",
                "    };\r",
                "    pm.sendRequest(hubGetStatusRequest, function (err, response) {\r",
                "        console.log(response.json())\r",
                "        var jsonData = response.json()\r",
                "        var hubReconAccountBalanceAfterFundsOutCommit\r",
                "        for (var i in jsonData) {\r",
                "            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {\r",
                "                pm.environment.set(\"hubReconAccountBalanceAfterFundsOutAbort\", jsonData[i].value)\r",
                "            }\r",
                "        }\r",
                "    });\r",
                "}, 2000)"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Record Funds In - prepare transfer status Copy",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers/{ID}",
          "path": "/transfers/{$prev.1.request.body.transferId}",
          "method": "get",
          "params": {
            "ID": "{$prev.1.request.body.transferId}"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "url": "{$inputs.mlAPIAdapter}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "ABORTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('ABORTED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "block_transfer ( p>ndc )",
      "requests": [
        {
          "id": 1,
          "description": "GET limits-payerfsp",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/limits",
          "path": "/participants/{$inputs.fromFspId}/limits",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "var payerNDC = jsonData[0].limit.value\r",
                "pm.environment.set(\"payerNDC\", payerNDC)"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "GET limits-payerfsp Copy",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/limits",
          "path": "/participants/{$inputs.toFspId}/limits",
          "method": "get",
          "params": {
            "name": "{$inputs.toFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "var payeeNDC = jsonData[0].limit.value\r",
                "pm.environment.set('payeeNDC', payeeNDC)"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get payerfsp position before TheTransfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "var result;\r",
                "\r",
                "jsonData.forEach(entry => {\r",
                "    (entry.currency === pm.environment.get(\"currency\")) ? result = entry.value : result =\r",
                "        undefined\r",
                "})\r",
                "\r",
                "pm.environment.set(\"payerfspPositionBeforeTransfer\", result);"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Get payerfsp position before TheTransfer Copy",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.toFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.toFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "var result;\r",
                "\r",
                "jsonData.forEach(entry => {\r",
                "    (entry.currency === pm.environment.get(\"currency\")) ? result = entry.value : result =\r",
                "        undefined\r",
                "})\r",
                "\r",
                "pm.environment.set(\"payeefspPositionBeforeTransfer\", result);"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.toIdValue}",
                "fspId": "{$inputs.toFspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "params": {
            "Type": "",
            "ID": ""
          },
          "url": null
        },
        {
          "id": 6,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "transferId": "{$prev.5.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.toFspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.5.callback.body.expiration}",
            "ilpPacket": "{$prev.5.callback.body.ilpPacket}",
            "condition": "{$prev.5.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "description": "Get payerfsp position after the transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "payerfsp Position After Transfer is the same",
                "exec": [
                  "expect(Number(environment.payerfspPositionAfterTransfer)).to.equal(Number(environment.payerfspPositionBeforeTransfer))"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "pm.environment.set(\"payerfspPositionAfterTransfer\", jsonData[0].value)"
              ]
            }
          }
        },
        {
          "id": 8,
          "description": "Get payeefsp position after the transfer",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.toFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.toFspId}"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "payeefsp Position After Transfer is the same",
                "exec": [
                  "expect(Number(environment.payeefspPositionAfterTransfer)).to.equal(Number(environment.payeefspPositionBeforeTransfer))"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "pm.environment.set(\"payeefspPositionAfterTransfer\", jsonData[0].value)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "p2p_money_transfer - p2p_happy_path SEND QUOTE",
      "requests": [
        {
          "id": 1,
          "description": "test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.toIdValue}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "body": {
            "fspId": "{$environment.payeefsp}",
            "currency": "DOP"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": 5,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": 8,
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.2.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.2.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.2.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.0')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be SEND",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('SEND')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.3.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$prev.2.callback.body.party.partyIdInfo.fspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.3.callback.body.expiration}",
            "ilpPacket": "{$prev.3.callback.body.ilpPacket}",
            "condition": "{$prev.3.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.3.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.3.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.3.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "p2p_money_transfer - p2p_happy_path RECEIVE_QUOTE",
      "requests": [
        {
          "id": 1,
          "description": "test",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.toIdValue}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "body": {
            "fspId": "{$environment.payeefsp}",
            "currency": "DOP"
          },
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Accept": "{$inputs.accept}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": 5,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": 8,
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.2.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.2.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.2.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version=1.0')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
            "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "transferId": "{$prev.3.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$prev.2.callback.body.party.partyIdInfo.fspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.3.callback.body.expiration}",
            "ilpPacket": "{$prev.3.callback.body.ilpPacket}",
            "condition": "{$prev.3.callback.body.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.3.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.3.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.3.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.2.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "Store Settlement&Position Account Balances Before Transfers",
      "requests": [
        {
          "id": 1,
          "description": "testfsp1 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "testfsp2 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp3 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp4 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.centralLedger}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        }
      ]
    }
  ]
}